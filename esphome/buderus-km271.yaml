### Update km271_params.h 2023-04-14
### RS232 Serielle Schnittstelle mit 2400 baud UART über GPIOs (TX-pin: GPIO1 # TXD RX-pin: GPIO3 # RXD)
### LED-Output: GREEN-LED (Wifi) an pin GPIO21 # IO21 und RED-LED (Recieve Data) an pin GPIO25 # IO2
### 2023-05-05 Update ESP-Version 2023.4.4
### 2023-05-29 Update ESP-Version 2023.5.5, added alternative WLAN-2 SSID
### 2023-10-22 Changed path: /config/esphome/my_components
### 2024-04-19 Added WiFi Status
### 2024-06-29 Update OTA for ESPhome V6
### 2024-10-01 Added BlueTooth esp32_ble_tracker and bluetooth_proxy
### 2024-11-17 Removed BlueTooth esp32_ble_tracker and bluetooth_proxy
### 2024-11-24 Added Comment, Project Information and id names
### 2024-11-30 Changed WiFI LED to monochromatic LED
### 2024-12-01 Removed RED and GREEN LED IOs (not connected) and changed RX to BLUE Onboard-LED
### 2025-01-18 Changed BUTTON commands to send via 3964R communication
### 2025-01-31 Remove WLAN Fallback Password and enable ESP32 Bluetooth LE to Provide Wifi Credential
### 2025-02-12 Deactivated Web-Server
### 2025-03-05 Removed custom component (as not supported by ESPHome 2025 anymore)
### 2025-03-09 Changes WIFI Fallback Password
### 2025-03-16 Added HK1 Raumisttemperatur (Message A11F)
###
esphome:
  name: buderus-km271
  comment: "ESP32 Buderus Ecomatic 4000 KM2.0 RS232 Interface 3964R"
  project:
    name: "ESP32.Buderus Ecomatic 4000"
    version: "2024.11.24"
  includes:
    - uart_read_line_sensor.h
 
esp32:
  board: esp32dev
  framework:
    type: arduino

# enabel Web Server Interface
#web_server:
#  port: 80
#  version: 2
#  log: false
#  auth:
#    username: "buderus-km271"
#    password: !secret web_server_password

# Enable logging
logger:
  level: DEBUG   # makes uart stream available in esphome logstream
  baud_rate: 0     # Disable UART logging (pins GPIO1/3 are used for RS232 communication)

# Enable Home Assistant API
api:
  encryption:
    key: "gK09H5EiMD47LhkrQ3ZEG9cM0pNXJQ3QmvHpfG/BR+s="

# Serielle Schnittstelle schreiben
  services:
    - service: write
      variables:
        command: string
      then:
# TX-LED on
        #- output.turn_on: tx_led # RED LED
        - output.turn_on: onboard_led # BLUE LED
# Write Command
        - uart.write:
            id: uart_bus
            data: !lambda |-
              std::string str = command;
              std::vector<uint8_t> vec(str.begin(), str.end());
              return vec;
# TX-LED off
        - delay: 0.25sec
        #- output.turn_off: tx_led # RED LED
        - output.turn_off: onboard_led # BLUE LED

ota:
  platform: esphome
  password: "f4efe32c05640f63c275bc7d7e8cde5e"

wifi:
  networks:
  - ssid: !secret wifi_ssid
    password: !secret wifi_password
  - ssid: !secret wifi_ssid_2
    password: !secret wifi_password_2

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Buderus Fallback Hotspot"
    password: "1234567890" # No Password

  # Sets up Bluetooth LE (Only on ESP32) to allow the user
# to provision wifi credentials to the device.
esp32_improv:
  authorizer: none


#### ENABLE BLUETOOTH BLE TRACKER ################################
#esp32_ble_tracker:
#  scan_parameters:
#    interval: 1100ms
#    window: 1100ms
#    active: true

#bluetooth_proxy:
#  active: true


captive_portal:

#### EXTERNAL COMPONENTS #########################################
external_components:
  - source:
      type: local
      path: /config/esphome/my_components
 
km271_wifi:
  - id: budoil
    uart_id: uart_bus

#### UART ########################################################
# RS232 Serielle Schnittstelle mit 2400 baud UART über GPIOs (TX-pin: GPIO1 # TXD RX-pin: GPIO3 # RXD)
uart:
  tx_pin: GPIO1 # TXD
  rx_pin: GPIO3 # RXD
  baud_rate: 2400
  id: uart_bus
  debug:
    direction: BOTH
    dummy_receiver: false
    after:
      delimiter: "\n"
    sequence:
      # - lambda: UARTDebug::log_string(direction, bytes);
       - lambda: UARTDebug::log_hex(direction, bytes, ':');
      # - lambda: UARTDebug::log_int(direction, bytes, ',');
      # - lambda: UARTDebug::log_binary(direction, bytes, ';');

#### OUTPUT ######################################################
# LEDs an GPIOs ansteuern
output:
  # GREEN LED
  #- id: wifi_led
  #  #platform: gpio
  #  platform: ledc
  #  pin: GPIO21 # IO21
  # RED LED
  #- id: tx_led
  #  platform: gpio
  #  pin: GPIO25 # IO25

# BLUE Onboard-LED an GPIO2 ansteuern
  # - platform: esp8266_pwm       ## bei ESP8266 
  - platform: ledc               ## bei ESP32 
    id: onboard_led
    pin:
      number: GPIO2              ## bei ESP8266
      #inverted: true             ## bei ESP8266

light:
# - platform: monochromatic
#   name: "WiFi connection LED"
#   id: wifi_connection_led
#   output: wifi_led
 - platform: monochromatic
   name: "Onboard LED"
   output: onboard_led
   id: blue_led

#### INTERVAL ####################################################
#interval:
#  - interval: 60s
#    then:
#      if:
#        condition:
#          wifi.connected:
#        then:
#          - output.turn_on: wifi_led
#        else:
#          - output.turn_off: wifi_led


#### BUTTON ######################################################
button:
################## Steuertasten Betriebsarten ECOMATIC 4000 HS4201
# Umschaltung auf Tag-Betrieb Manuell
- platform: template
  name: "Tag-Betrieb - Manuell"
  id: km271_betr_t_manuell
  on_press:
    - lambda:
        uint8_t command[] = {0x31, 0x08, 0x01, 0x10, 0x03, 0x2B};
        budoil->writer.enqueueTelegram(command, 8);
#    - uart.write:
#        id: uart_bus
#        data: [0x02]
#    - delay: 200ms
#    - uart.write:
#        id: uart_bus
#        data: [0x31, 0x08, 0x01, 0x10, 0x03, 0x2B]


# Umschaltung auf Tag-Betrieb Automatik
- platform: template
  name: "Tag-Betrieb - Automatik"
  id: km271_betr_t_auto
  on_press:
    - lambda:
        uint8_t command[] = {0x31, 0x08, 0x03, 0x10, 0x03, 0x29};
        budoil->writer.enqueueTelegram(command, 8);
#    - uart.write:
#        id: uart_bus
#        data: [0x02]
#    - delay: 200ms
#    - uart.write:
#        id: uart_bus
#        data: [0x31, 0x08, 0x03, 0x10, 0x03, 0x29]


# Umschaltung auf Nacht-Betrieb Manuell
- platform: template
  name: "Nacht-Betrieb - Manuell"
  id: km271_betr_n_manuell
  on_press:
    - lambda:
        uint8_t command[] = {0x31, 0x08, 0x00, 0x10, 0x03, 0x2A};
        budoil->writer.enqueueTelegram(command, 8);
#    - uart.write:
#        id: uart_bus
#        data: [0x02]
#    - delay: 200ms
#    - uart.write:
#        id: uart_bus
#        data: [0x31, 0x08, 0x00, 0x10, 0x03, 0x2A]


# Umschaltung auf Nacht-Betrieb Automatik
- platform: template
  name: "Nacht-Betrieb - Automatik"
  id: km271_betr_n_auto
  on_press:
    - lambda:
        uint8_t command[] = {0x31, 0x08, 0x02, 0x10, 0x03, 0x28};
        budoil->writer.enqueueTelegram(command, 8);
#    - uart.write:
#        id: uart_bus
#        data: [0x02]
#    - delay: 200ms
#    - uart.write:
#        id: uart_bus
#        data: [0x31, 0x08, 0x02, 0x10, 0x03, 0x28]


##################################################################

#### NUMBER ######################################################
number:
# Below is the real example stuff
  - platform: km271_wifi
    config_ww_temperature:
      name: "Warmwassersolltemperatur Tag"
      id: warmwassersolltemperatur_tag
      mode: slider
    config_heating_circuit_1_design_temperature:
      name: "Auslegungstemperatur"
      id: auslegungstemperatur
      mode: slider
    config_heating_circuit_1_room_target_temperature_day:
      name: "HK1 Raumsolltemperatur Tag"
      id: heizkreis1_raumsolltemperatur_tag
      mode: slider
    config_heating_circuit_1_room_temperature_offset:
      name: "HK1 Raumtemperatur Offset"
      id: heizkreis_1_raumtemperatur_offset
      mode: slider
    config_heating_circuit_1_flow_temperature_max:
      name: "HK1 Heizkreistemperaur Maximal"
      id: heizkreis_1_heizkreistemperatur_maximal
      mode: slider

#### SELECT ######################################################    
select:
# Below is the real example stuff
  - platform: km271_wifi
    config_heating_circuit_1_operation_mode:
      name: "HK1 Betriebsmodus"
      id: heizkreis_1_betriebsmodus


#### BINARY SENSOR ###############################################
binary_sensor:
  - platform: status
    name: "WiFi Status"
    id: buderus_wifi_status

  # Below is the real example stuff
  - platform: km271_wifi
    # Betriebswerte 1 HK1
    heating_circuit_1_automatic:
      name: "HK1 Automatik"
      id: hk1_automatik
      entity_category: ""

    heating_circuit_1_ww_priority_processing:
      name: "HK1 Warmwasservorrang"
      id: hk1_warmwasservorrang
      entity_category: ""

    heating_circuit_1_screed_drying:
      name: "HK1 Estrichtrocknung"
      id: hk1_estrichtrocknung
      entity_category: ""

    heating_circuit_1_holiday:
      name: "HK1 Ferien"
      id: hk1_ferien
      entity_category: ""

    heating_circuit_1_antifreeze:
      name: "HK1 Frostschutz"
      id: hk1_frostschutz
      entity_category: ""

    heating_circuit_1_manually:
      name: "HK1 Manuell"
      id: hk1_manuell
      entity_category: ""

    # Betriebswerte 1 WW
    ww_automatic:
      name: "WW Automatik"
      id: ww_automatik
      entity_category: ""

    ww_disinfection:
      name: "WW Desinfektion"
      id: ww_desinfektion
      entity_category: ""

    ww_reload:
      name: "WW Nachladung"
      id: ww_nachladung
      entity_category: ""

    ww_holiday:
      name: "WW Ferien"
      id: ww_ferien
      entity_category: ""

    # Steuerung HS4201 Brenner und Mischer
    st_hs4201_b0:
      name: "Brenner EIN"
      id: brenner_ein
      entity_category: ""

    st_hs4201_b1:
      name: "Ladepumpe Warmwasser"
      id: ladepumpe_warmwasser
      entity_category: ""

    st_hs4201_b2:
      name: "Zirkulationspumpe Heizkörper"
      id: zirkulationspumpe_heizkorper
      entity_category: ""

    st_hs4201_b3:
      name: "Mischer AUF"
      id: mischer_auf
      entity_category: ""

    st_hs4201_b4:
      name: "Mischer ZU"
      id: mischer_zu
      entity_category: ""

    st_hs4201_b5:
      name: "Brenner AUS"
      id: brenner_aus
      entity_category: ""

    st_hs4201_b6:
      name: "ST-Bit 6 AN"
      id: st_bit_6_an
      entity_category: ""

    st_hs4201_b7:
      name: "Zirkulationspumpe Fußboden"
      id: zirkulationspumpe_fussboden
      entity_category: ""

    # Steuerung HS4201 Tag/Nacht Automatik/Manuell
    betrzu_b0:
      name: "Betrieb Tag"
      id: betrieb_tag
      entity_category: ""

    betrzu_b1:
      name: "Betrieb Automatik"
      id: betrieb_automatik
      entity_category: ""

    betrzu_b2:
      name: "BTR Bit 2 AN"
      id: btr_bit_2_an
      entity_category: ""

    betrzu_b3:
      name: "BTR Bit 3 AN"
      id: btr_bit_3_an
      entity_category: ""

    betrzu_b4:
      name: "BTR Bit 4 AN"
      id: btr_bit_4_an
      entity_category: ""

    betrzu_b5:
      name: "BTR Bit 5 AN"
      id: btr_bit_5_an
      entity_category: ""

    betrzu_b6:
      name: "BTR Bit 6 AN"
      id: btr_bit_6_an
      entity_category: ""

    betrzu_b7:
      name: "BTR Bit 7 AN"
      id: btr_bit_7_an
      entity_category: ""

#### SENSOR ######################################################
sensor:
# Below is the real example stuff
  - platform: km271_wifi
    heating_circuit_1_flow_target_temperature:
      name: "HK1 Vorlaufsolltemperatur"
      id: hk1_vorlaufsolltemperatur
      entity_category: ""

    heating_circuit_1_flow_temperature:
      name: "HK1 Vorlaufisttemperatur"
      id: hk1_vorlaufisttemperatur
      entity_category: ""

    heating_circuit_1_room_target_temperature:
      name: "HK1 Raumsolltemperatur"
      id: hk1_raumsolltemperatur
      entity_category: ""

    heating_circuit_1_room_temperature:
      name: "HK1 Raumisttemperatur"
      id: hk1_raumisttemperatur
      entity_category: ""
      filters: ## Bei ECOMATIC ist die Temperatur der Wert geteilt duch 10
      - multiply: !lambda return 0.1;

    heating_circuit_1_pump_power:
      name: "HK1 Pumpenleistung"
      id: hk1_pumpenleistung
      entity_category: ""

    heating_circuit_1_mixer_position:
      name: "HK1 Mischerstellung"
      id: hk1_mischerstellung
      entity_category: ""

    ww_target_temperature:
      name: "Warmwassersolltemperatur"
      id: warmwassersolltemperatur
      entity_category: ""

    ww_temperature:
      name: "Warmwasseristtemperatur"
      id: warmwasseristtemperatur
      entity_category: ""

    boiler_target_temperature:
      name: "Kesselvorlaufsolltemperatur"
      id: kesselvorlaufsolltemperatur
      entity_category: ""

    boiler_temperature:
      name: "Kesselvorlaufisttemperatur"
      id: kesselvorlaufisttemperatur
      entity_category: ""

    outdoor_temperature:
      name: "Aussentemperatur"
      id: aussentemperatur
      entity_category: ""

    boiler_runtime_1:
      name: "Brennerlaufzeit 1"
      id: brennerlaufzeit_1
      entity_category: ""

    boiler_runtime_2:
      name: "Brennerlaufzeit 2"
      id: brennerlaufzeit_2
      entity_category: ""

  # WiFi Signal als Sensor
  - platform: wifi_signal
    name: "WiFi Strenght"
    id: km271_wifi_strength
    update_interval: 60s
    icon: mdi:wifi
    entity_category: "diagnostic" 
    
  - platform: copy # Reports the WiFi signal strength in %
    source_id: km271_wifi_strength
    name: "WiFi Percent"
    id: buderus_wifi_percent
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"

  # Messung der spannungsversorgung des km271-WiFi boards
  - platform: adc
    pin: 36
    unit_of_measurement: "V"
    name: "Power Supply"
    id: buderus_5v_supply
    accuracy_decimals: 2
    update_interval: 5s
    attenuation: 6dB
    filters:
      - multiply: 28.1826
      - throttle_average: 60s
    entity_category: "diagnostic"

  # Messung der internen Temperatur des km271-WiFi boards - NUR ESP32 #####
  - platform: internal_temperature
    name: "Internal Temp"
    id: buderus_internal_temp
    update_interval: 60s

#### SWITCH ######################################################
switch:
  # Neustart des ESP32
  - platform: restart
    name: "ESP32 Restart"
    id: buderus_wifi_restart
    entity_category: "diagnostic"
  - platform: template
    name: "KM271 UART RX"
    id: km271_uart_rx
    turn_on_action:
        - uart.write:
            id: uart_bus
            data: !lambda |-
              std::string str = "\x10";
              std::vector<uint8_t> vec(str.begin(), str.end());
              return vec;
        - delay: 1sec
        - switch.turn_off: km271_uart_rx


#### TEXT SENSOR #################################################
text_sensor:
  - platform: km271_wifi
    firmware_version:
      name: "Firmware Steuerung"
      id: firmwareversion_steuerung

#  # RS232 data as Text-Sensor ## Removed as not supported by ESPhome 2025
#  - platform: custom
#    text_sensors:
#      name: "KM271 RS232 Output"
#      id: "km271rs232_txt"
#    lambda: |-
#      auto my_custom_sensor = new UartReadLineSensor(id(uart_bus));
#      App.register_component(my_custom_sensor);
#      return {my_custom_sensor};

  # Local WiFi Info as Text-Sensor
  - platform: wifi_info
    ip_address:
      name: Buderus IP Address
      id: buderus_ip_address
    ssid:
      name: "SSID"
      id: buderus_ssid
    bssid:
      name: "BSSID"
      id: buderus_bssid
    mac_address:
      name: "Mac Address"
      id: buderus_mac
    scan_results:
      name: Scan Result"
      id: buderus_scan
  # ESP Version
  - platform: version
    name: "ESPHome Version"
    id: buderus_esphome_version

#### END ########################################################
